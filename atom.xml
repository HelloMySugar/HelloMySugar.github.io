<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Root&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tangyanqiong.com/"/>
  <updated>2020-04-14T07:56:26.505Z</updated>
  <id>https://tangyanqiong.com/</id>
  
  <author>
    <name>Root</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter最新版本环境搭建报错</title>
    <link href="https://tangyanqiong.com/post/dc7fb27e.html"/>
    <id>https://tangyanqiong.com/post/dc7fb27e.html</id>
    <published>2020-04-14T06:24:35.000Z</published>
    <updated>2020-04-14T07:56:26.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近更新到Mac OS最新系统Catalina，重装了Flutter，出现了些问题，在网上也搜索了，可能是才出的新版本问题，也没找到解决办法，最终自己捣鼓解决了此问题，随笔记录下此问题。 </p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>正常搭建Flutter的过程就不说了，到最后一步执行<code>flutter doctor</code>时报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TangYanQiong-MacbookPro:~ TangDan$ flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel master, v1.18.0-5.0.pre.57, on Mac OS X 10.15.4 19E287,</span><br><span class="line">    locale zh-Hans-CN)</span><br><span class="line">[!] Android toolchain - develop for Android devices (Android SDK version 29.0.3)</span><br><span class="line">    ✗ Android license status unknown.</span><br><span class="line">      Try re-installing or updating your Android SDK Manager.</span><br><span class="line">      See https://developer.android.com/studio/#downloads or visit visit</span><br><span class="line">      https://flutter.dev/docs/get-started/install/macos#android-setup for</span><br><span class="line">      detailed instructions.</span><br><span class="line">[✓] Xcode - develop for iOS and macOS (Xcode 11.4)</span><br><span class="line">[✓] Android Studio (version 3.6)</span><br><span class="line"> </span><br><span class="line">[!] Connected device                          </span><br><span class="line">    ! No devices available</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 2 categories.</span><br></pre></td></tr></table></figure><p>网上查了，大多答案都是让执行<code>flutter doctor --android-licenses</code>，结果又报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TangYanQiong-MacbookPro:~ TangDan$ flutter doctor --android-licenses</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Android sdkmanager tool not found</span><br><span class="line">(/Users/TangDan/Library/Android/sdk/tools/bin/sdkmanager).</span><br><span class="line">Try re-installing or updating your Android SDK,</span><br><span class="line">visit https://flutter.dev/docs/get-started/install/macos#android-setup for</span><br><span class="line">detailed instructions.</span><br></pre></td></tr></table></figure><p>这个意思是说，Android sdkmanager tool没找到，然后按照提示的目录信息，去找了一下，发现我的sdk目录下，根本就没有tools这个文件夹，后来调查发现，这个tools文件实际上是android studio安装了Android SDK Tools才会有生成那个文件夹，在这里勾选安装，如果你本地有这个的话，安装了应该就好了。</p><p><img src="https://i.loli.net/2020/04/14/banc4LTCiGfH6uM.png" alt="20190305104220816.png"></p><p>但是我本地并没有这个选项，我这边的Android SDK配置是这样的，根本没有tools这个安装包，只有Command-line Tools这个，有点类似，就也勾选安装了：<br><img src="https://i.loli.net/2020/04/14/VzNalLOkI4bX52F.jpg" alt="921794A9-2AA5-414D-BB73-B2C8E04D6DC6.png"></p><p>安装成功后的目录如下：<br><img src="https://i.loli.net/2020/04/14/AQrYhRKN8gBdO2y.jpg" alt="8C0A4825-8370-4CE2-9421-BEB561E68F24.png"></p><p>还是没有tools这个文件夹，但是sdkmanager有了，后面自己想了下，不是缺tools吗？只是路径不对的问题了，就自己新建了个tools，里面在创建了个bin文件夹，再把sdkmanager拷进去。<br><img src="https://i.loli.net/2020/04/14/RGnK1e3mx4LZIph.jpg" alt="27225CB4-388F-4C7C-8EDD-99A3C0C2C242.png"><br><img src="https://i.loli.net/2020/04/14/JXTMI9Pfw821ySe.jpg" alt="9D0FB5F4-C0DF-44A0-9C8C-421482B40E32.png"></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>猜想是，Android Studio最新版本Tools版本、名称及路径修改了，但是flutter最新版本并未更新，还是使用老路径导致找不到。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>现在再来执行<code>flutter doctor --android-licenses</code>，一路<code>y</code>下去，设置成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TangYanQiong-MacbookPro:~ TangDan$ flutter doctor --android-licenses</span><br><span class="line">5 of 7 SDK package licenses not accepted. 100% Computing updates...             </span><br><span class="line">Review licenses that have not been accepted (y/N)? y</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>最后，再执行<code>flutter doctor</code>，大功告成，不报错了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">TangYanQiong-MacbookPro:~ TangDan$ flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel master, v1.18.0-5.0.pre.57, on Mac OS X 10.15.4 19E287,</span><br><span class="line">    locale zh-Hans-CN)</span><br><span class="line"> </span><br><span class="line">[✓] Android toolchain - develop for Android devices (Android SDK version 29.0.3)</span><br><span class="line">[✓] Xcode - develop for iOS and macOS (Xcode 11.4)</span><br><span class="line">[✓] Android Studio (version 3.6)</span><br><span class="line"> </span><br><span class="line">[!] Connected device                          </span><br><span class="line">    ! No devices available</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 1 category.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近更新到Mac OS最新系统Catalina，重装了Flutter，出现了些问题，在网上也搜索了，可能是才出的新版本问题，也没找到解决办法，最终自己捣鼓解决了此问题，随笔记录下此问题。 &lt;/p&gt;
    
    </summary>
    
      <category term="Flutter" scheme="https://tangyanqiong.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://tangyanqiong.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter分享</title>
    <link href="https://tangyanqiong.com/post/ffc8d381.html"/>
    <id>https://tangyanqiong.com/post/ffc8d381.html</id>
    <published>2020-04-10T08:18:35.000Z</published>
    <updated>2020-04-14T07:20:18.876Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter环境安装</p><p><a href="https://www.jianshu.com/p/796bb7811797" target="_blank" rel="noopener">https://www.jianshu.com/p/796bb7811797</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flutter环境安装&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/796bb7811797&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/796bb7811797
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac OS Catalina 终端Shell报警告</title>
    <link href="https://tangyanqiong.com/post/bdd80ff3.html"/>
    <id>https://tangyanqiong.com/post/bdd80ff3.html</id>
    <published>2020-04-10T07:18:37.000Z</published>
    <updated>2020-04-14T07:20:18.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><p>前两天更新了Mac OS Catalina系统，总体来说还是可以，虽然有些只支持32位的应用，比如2015版的Office、WireShark等不能用了，但塞翁失马焉知非福呢，卸掉了Office相关的Word、Excel、PPT，瞬间清了几大个G，然后去下载了WPS多方文档格式支持软件，简直不要太好用，而且才几百兆，扯远了。。。</p><p>今天随笔记一个小事件，对于强迫症人士有用，比如我。</p><p>终端Shell报警告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The default interactive shell is now zsh.</span><br><span class="line">To update your account to use zsh, please run `chsh -s /bin/zsh`.</span><br><span class="line">For more details, please visit https://support.apple.com/kb/HT208050.</span><br><span class="line">TangYanQiongdeMacBook-Pro:~ TangDan$</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>从报的警告就可以看出，提示原来使用的是bash风格，然而Catalina系统的shell已更改为zsh，请用 <code>chsh -s /bin/zsh</code> 更新替换，好吧，就run了，结果变成了这个风格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TangDan@TangYanQiongdeMacBook-Pro ~ %</span><br></pre></td></tr></table></figure><p>对这种爱不起来，然后查看系统支持的shell风格列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TangYanQiongdeMacBook-Pro:~ TangDan$ cat /etc/shells</span><br><span class="line"># List of acceptable shells for chpass(1).</span><br><span class="line"># Ftpd will not allow users to connect who are not using</span><br><span class="line"># one of these shells.</span><br><span class="line"></span><br><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/dash</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure><p>然后每个都试了，还是<code>/bin/bash</code>这种风格<code>TangYanQiongdeMacBook-Pro:~ TangDan$</code>最喜欢，但是系统会报警告，好，那把这个警告怎么消除？</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol><li>vim修改bash_profile文件，在终端输出</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><ol start="2"><li>在bash_profile文件最下方加上，按<code>i</code>进入编辑模式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># macOS Catalina</span><br><span class="line">export BASH_SILENCE_DEPRECATION_WARNING=1</span><br></pre></td></tr></table></figure><ol start="3"><li>按<code>esc</code>退出编辑模式，再输入<code>:wq</code>保存退出，现在终端就不会报警告了。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Last login: Fri Apr 10 15:40:06 on ttys006</span><br><span class="line">TangYanQiongdeMacBook-Pro:~ TangDan$</span><br></pre></td></tr></table></figure><h1 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h1><p>看到我这边shell用户名<code>TangYanQiongdeMacBook-Pro</code>我想改它很久（中英混合。。。），这会顺便改了，打开系统偏好设置-共享-直接修改电脑名称就可以修改了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Last login: Fri Apr 10 15:46:05 on ttys006</span><br><span class="line">TangYanQiong-MacbookPro:~ TangDan$</span><br></pre></td></tr></table></figure><p>舒服了，😃</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;随笔&quot;&gt;&lt;a href=&quot;#随笔&quot; class=&quot;headerlink&quot; title=&quot;随笔&quot;&gt;&lt;/a&gt;随笔&lt;/h1&gt;&lt;p&gt;前两天更新了Mac OS Catalina系统，总体来说还是可以，虽然有些只支持32位的应用，比如2015版的Office、WireShark等不能用了，但塞翁失马焉知非福呢，卸掉了Office相关的Word、Excel、PPT，瞬间清了几大个G，然后去下载了WPS多方文档格式支持软件，简直不要太好用，而且才几百兆，扯远了。。。&lt;/p&gt;
&lt;p&gt;今天随笔记一个小事件，对于强迫症人士有用，比如我。&lt;/p&gt;
&lt;p&gt;终端Shell报警告：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;The default interactive shell is now zsh.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;To update your account to use zsh, please run `chsh -s /bin/zsh`.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For more details, please visit https://support.apple.com/kb/HT208050.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TangYanQiongdeMacBook-Pro:~ TangDan$&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Others" scheme="https://tangyanqiong.com/categories/Others/"/>
    
    
      <category term="Shell" scheme="https://tangyanqiong.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>RN分享</title>
    <link href="https://tangyanqiong.com/post/98fdf95d.html"/>
    <id>https://tangyanqiong.com/post/98fdf95d.html</id>
    <published>2020-04-08T10:01:20.000Z</published>
    <updated>2020-04-08T10:01:55.018Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS及Web使用语言特性</title>
    <link href="https://tangyanqiong.com/post/4546698d.html"/>
    <id>https://tangyanqiong.com/post/4546698d.html</id>
    <published>2019-09-16T03:07:38.000Z</published>
    <updated>2020-04-14T07:58:39.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>关于iOS及Web的使用语言Object-C、Swift、JavaScript，大家都耳熟能详，那它们到底是什么类型的静态语言？以及什么强弱类型语言？很多同学只是简单的背出它们是什么语言及类型，但并没有理解到，现在来举例说明和分享一下。</p><a id="more"></a><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="Object-C"><a href="#Object-C" class="headerlink" title="Object-C"></a>Object-C</h2><p>我用的最多的当然是Object-C，毕竟是做iOS开发出身，对这个语言了解最深。首先，因为黑魔法RunTime机制，Object-C是一个运行时的<strong>动态类型的强类型语言</strong>，举例如下：</p><ol><li>以下两种情况都可以看出，Xcode编译时并不会报错，说明是一个<em>动态语言</em>，运行时才会去检验类型</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSString *test = @&quot;1231231&quot;;</span><br><span class="line">test = [[NSDate alloc] init];</span><br><span class="line"></span><br><span class="line">NSDate *test2 = @&quot;1231231&quot;; // test2的真实类型是什么，运行时会得到String类型，并不是声明时的NSDate类型</span><br></pre></td></tr></table></figure><ol start="2"><li>Object-C是<em>强类型语言</em>，因为变量必须声明类型才能使用，说实话，Object-C的代码简洁性，是真的不怎么高</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSString *certsPath = [[NSBundle mainBundle] pathForResource:@&quot;server&quot; ofType:@&quot;crt&quot;];</span><br><span class="line">NSError *error;</span><br><span class="line">NSString *contentInUTF8 = [NSString stringWithContentsOfFile:certsPath encoding:NSUTF8StringEncoding error:&amp;error];</span><br></pre></td></tr></table></figure><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><p>iOS的这两种开发语言，Swift和OC，Swift更简洁了，减少了代码的冗余性，最开始接触它的时候，我还以为它是一门弱语言类型的语言，后来发现我错了，下面会娓娓道来，它实际是一门<strong>静态类型的强类型语言</strong>。</p><ol><li>以下情况代码编译会报错：’Cannot assign value of type ‘NSDate’ to type ‘String’’ ，类型错误，由此看出Swift是<em>静态类型语言</em></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var tmp = &quot;asdfas&quot;</span><br><span class="line">let date = NSDate.init()</span><br><span class="line">tmp = date</span><br></pre></td></tr></table></figure><ol start="2"><li>为什么一开始会觉得它是弱类型语言呢？</li></ol><blockquote><p>Swift 变量不强制的指定类型，而是用 var 和 let 表示可变与不可变。所以，误Swift是一门弱类型的语言。</p></blockquote><p>像下面的代码块，变量赋值时并没声明类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let num = 1</span><br><span class="line">let str = &quot;2&quot;</span><br></pre></td></tr></table></figure><p>基于以上，从自身理解，误以为<del>Swift是弱类型语言</del></p><p>但是，实际上，这里没有强制声明类型，看似一个弱类型的语言，其实不然。Swift 编译器能够推断出 num 是 Int 类型。那么 num 就不能再被赋值为 String 类型。更不能写成如下的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let num = 1</span><br><span class="line">let str = &quot;2&quot;</span><br><span class="line">let result = num + str</span><br></pre></td></tr></table></figure><p><strong>编译器将会报如下的错误：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">error: binary operator &apos;+&apos; cannot be applied to operands of type &apos;Int&apos; and &apos;String&apos;</span><br><span class="line">let result = num + str</span><br><span class="line">             ~~~ ^ ~~~</span><br><span class="line">note: overloads for &apos;+&apos; exist with these partially matching parameter lists: (Int, Int), (String, String), (Int, UnsafeMutablePointer&lt;Pointee&gt;), (Int, UnsafePointer&lt;Pointee&gt;)</span><br><span class="line">let result = num + str</span><br></pre></td></tr></table></figure><p>这说明了，Swift 是一门<em>强类型语言</em>。Swift 的类型声明，你可以看成是在定义变量的时候，隐式声明的（由编译器推断出），当然也可以显式的声明。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let num: Int = 1</span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>Web中的常用语言JavaScript，如果有语言基础的话，是一门很快上手的语言，我也很喜欢JavaScript，当然也有使用中比较头疼的事，因为它是一门<strong>动态类型的弱类型语言</strong>，往往项目中在项目运行成功后，控制台意想不到的报错，不像强语言类型那样，直接编译不过，而我又有Swift的编写思想，想着它类型编译通过了，运行肯定就没问题，往往会出现比如编译没问题，类型错误的问题，而且它没有iOS中nil可以调用任何方法的容错机制，如果这个对象为nil再调用其某个方法也会报错，所以写的时候必须要判断是否为空，增加代码冗余性，但是，好处大于弊端，比如代码简洁性，可以动态写很多业务逻辑，我还是很喜欢它。</p><ol><li><em>动态类型语言</em>，以下情况，编译没问题，动态运行时赋值类型</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let tmpFlag = false</span><br><span class="line">let test = &apos;asdfasdfas&apos;</span><br><span class="line">test = tmpFlag // 所以最终test为Bool类型了</span><br></pre></td></tr></table></figure><ol start="2"><li><em>弱类型语言</em>，书写变量时不用声明类型也可</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let tmpFlag = false</span><br><span class="line">let test = &apos;asdfasdfas&apos;</span><br><span class="line">let jjjj = Date.now()</span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>TypeScript是JavaScript的一个超集，TypeScript可以使用JavaScript中的所有代码和编码概念，TypeScript是为了使 JavaScript的开发变得更加容易而创建的，它是关于尽早捕获错误并使您成为更高效的开发人员，它是什么类型的语言？我们把在JavaScript上实验的代码，放在ts里一试便知道。</p><ol><li>以下情况是js上实验的代码，在ts里编译报错，说明TypeScript是<em>静态类型语言</em></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let tmpFlag = false</span><br><span class="line">let test = &apos;asdfasdfas&apos;</span><br><span class="line">test = tmpFlag</span><br></pre></td></tr></table></figure><p>报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">43:9 Type &apos;false&apos; is not assignable to type &apos;string&apos;.</span><br></pre></td></tr></table></figure><ol start="2"><li>相同代码又在ts里实验，编译未报错，故TypeScript是<em>弱类型语言</em></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let tmpFlag = false</span><br><span class="line">let test = &apos;asdfasdfas&apos;</span><br><span class="line">let jjjj = Date.now()</span><br></pre></td></tr></table></figure><p>以下代码也未报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let num = 1</span><br><span class="line">let str = &apos;2&apos;</span><br><span class="line">let result = num + str</span><br></pre></td></tr></table></figure><p>综上可知，TypeScript是一门<strong>静态类型的弱类型语言</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;关于iOS及Web的使用语言Object-C、Swift、JavaScript，大家都耳熟能详，那它们到底是什么类型的静态语言？以及什么强弱类型语言？很多同学只是简单的背出它们是什么语言及类型，但并没有理解到，现在来举例说明和分享一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="https://tangyanqiong.com/categories/Others/"/>
    
    
      <category term="Swift" scheme="https://tangyanqiong.com/tags/Swift/"/>
    
      <category term="Object-C" scheme="https://tangyanqiong.com/tags/Object-C/"/>
    
      <category term="JavaScript" scheme="https://tangyanqiong.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="https://tangyanqiong.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>跨平台RN与Flutter对比及学习</title>
    <link href="https://tangyanqiong.com/post/196a8be9.html"/>
    <id>https://tangyanqiong.com/post/196a8be9.html</id>
    <published>2019-09-08T07:42:34.000Z</published>
    <updated>2020-03-25T09:04:29.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近想学跨平台开发，在RN和Flutter中纠结学哪个，看了资料RN对Web前端比较友好，都是JS开发语言，比较容易上手，但是有个以前的iOS同事，他现在已经用Flutter着手在开发iOS、Android了，据他说很好用。</p><a id="more"></a><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>跨平台，首先考虑的就是性能问题，谁的性能好，未来必将是谁的天下。</p><h2 id="RN性能"><a href="#RN性能" class="headerlink" title="RN性能"></a>RN性能</h2><p>RN的效率由于是将View编译成了原生View，所以效率上要比基于Cordova的HTML5高很多，但是它也有效率问题，RN的渲染机制是基于前端框架的考虑，复杂的UI渲染是需要依赖多个view叠加。比如我们渲染一个复杂的ListView，每一个小的控件，都是一个native的view，然后相互组合叠加，想想此时如果我们的list再需要滑动刷新，会有多少个对象需要渲染，所以也就有了前面所说的RN的列表方案不友好。</p><h3 id="RN框架原理图"><a href="#RN框架原理图" class="headerlink" title="RN框架原理图"></a>RN框架原理图</h3><p><img src="https://upload-images.jianshu.io/upload_images/11451874-f497b4b23ec7392f.png" alt="RN框架原理图"></p><h2 id="Flutter性能"><a href="#Flutter性能" class="headerlink" title="Flutter性能"></a>Flutter性能</h2><p>而Flutter则吸收了前两者的教训之后，在渲染技术上，选择了自己实现(GDI)，有自己的一套UI系统，由于有更好的可控性，使用了新的语言Dart，避免了RN的那种通过桥接器与Javascript通讯导致效率低下的问题，所以在性能方面无可厚非比RN更高一筹，有经验的开发者可以打开Android手机开发者选项里面的显示边界布局，发现Flutter的布局是一个整体，说明Flutter的渲染没用使用原生控件进行渲染。</p><h3 id="Flutter框架原理图"><a href="#Flutter框架原理图" class="headerlink" title="Flutter框架原理图"></a>Flutter框架原理图</h3><p><img src="https://upload-images.jianshu.io/upload_images/11451874-12b2515a4cb0cdb1.png" alt="Flutter框架原理图"></p><h1 id="异同"><a href="#异同" class="headerlink" title="异同"></a>异同</h1><ul><li><p>Flutter性能会更好无线接近原生的体验,Dart是AOT编译的，编译成快速、可预测的本地代码</p></li><li><p>RN采用JS语言开发，基于React，对前端工程师更友好。Dart语言受众小</p></li><li><p>Flutter自己实现了一套UI框架，丢弃了原生的UI框架。而RN还是可以自己利用原生框架，两个各有好处。Flutter的兼容性高，RN可以利用原生已有的优秀UI</p></li><li><p>RN的布局更像css，而Flutter的布局更像native布局，但是去掉xml通过代码直接写需要适应下</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对比了RN/Flutter后，我觉得对于我来说，RN应该很容易上手，因为有前端基础，RN学习起来应该很快，但是我也不想放弃Flutter，Flutter布局像原生布局，有iOS开发经验的我也不想放弃，因为有iOS同事成功上车的前车之鉴，所以我也很有信心能学好它，从性能来说我也更偏向Flutter，但是也不想浪费RN这个学习机会，所以就我自己的实际情况而言，我会两个都学。</p><p>总之，一句话吧，<strong>基于自身实际情况，没有更好只有最适合你的框架</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近想学跨平台开发，在RN和Flutter中纠结学哪个，看了资料RN对Web前端比较友好，都是JS开发语言，比较容易上手，但是有个以前的iOS同事，他现在已经用Flutter着手在开发iOS、Android了，据他说很好用。&lt;/p&gt;
    
    </summary>
    
      <category term="跨平台" scheme="https://tangyanqiong.com/categories/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Flutter" scheme="https://tangyanqiong.com/tags/Flutter/"/>
    
      <category term="RN" scheme="https://tangyanqiong.com/tags/RN/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown常用语法</title>
    <link href="https://tangyanqiong.com/post/d18ae5e4.html"/>
    <id>https://tangyanqiong.com/post/d18ae5e4.html</id>
    <published>2019-09-04T09:00:29.000Z</published>
    <updated>2020-03-25T09:20:10.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h1><p>由于前段时间工作忙，快一个月没更新博客了，貌似有些忘了MarkDown的语法，这里记录下MarkDown语法作备忘录，以后方便查找。</p><a id="more"></a><h1 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h1><h3 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#一级标题</span><br><span class="line"></span><br><span class="line">##二级标题</span><br><span class="line"></span><br><span class="line">###三级标题</span><br><span class="line"></span><br><span class="line">####四级标题</span><br><span class="line"></span><br><span class="line">#####五级标题</span><br><span class="line"></span><br><span class="line">######六级标题</span><br></pre></td></tr></table></figure><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><hr><h3 id="使用-加空格，来表示无序列表"><a href="#使用-加空格，来表示无序列表" class="headerlink" title="使用*加空格，来表示无序列表"></a>使用*加空格，来表示无序列表</h3><ul><li><p>1</p></li><li><p>2</p></li><li><p>3</p></li></ul><h3 id="用数字加-加空格，来表示有序列表"><a href="#用数字加-加空格，来表示有序列表" class="headerlink" title="用数字加.加空格，来表示有序列表"></a>用数字加.加空格，来表示有序列表</h3><ol><li><p>1</p></li><li><p>2</p></li><li><p>3</p></li><li><p>4</p></li></ol><h3 id="使用引用"><a href="#使用引用" class="headerlink" title="使用引用"></a>使用引用</h3><blockquote><p>引用需要使用&gt;和空格</p></blockquote><h3 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h3><p><a href="http://baidu.com" target="_blank" rel="noopener">baidu</a></p><h3 id="插入在线图片"><a href="#插入在线图片" class="headerlink" title="插入在线图片"></a>插入在线图片</h3><p><img src="https://www.baidu.com/img/bd_logo1.png" alt="icon"></p><h3 id="使用粗体、斜体"><a href="#使用粗体、斜体" class="headerlink" title="使用粗体、斜体"></a>使用粗体、斜体</h3><p><strong>这就是粗体</strong></p><p><em>这就是斜体</em></p><p><strong><em>这就是斜粗体</em></strong></p><h3 id="Task-list"><a href="#Task-list" class="headerlink" title="Task list"></a>Task list</h3><ul><li style="list-style: none"><input type="checkbox" checked> finished</li><li style="list-style: none"><input type="checkbox"> unfinished</li></ul><p><del>这个是删除线</del></p><h3 id="使用代码框，PS-这种不支持代码的语法高亮"><a href="#使用代码框，PS-这种不支持代码的语法高亮" class="headerlink" title="使用代码框，PS:这种不支持代码的语法高亮"></a>使用代码框，PS:这种不支持代码的语法高亮</h3><p>~~~<br>@IBAction func showMessage(){</p><p>let alertController = UIAlertController(title: “welcome to my first app”, message: “hello world”, preferredStyle: UIAlertControllerStyle.Alert)</p><p>alertController.addAction(UIAlertAction(title: “OK”, style: UIAlertActionStyle.Default, handler: nil))</p><p>self.presentViewController(alertController, animated: true, completion: nil)</p><p>}<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h1&gt;&lt;p&gt;由于前段时间工作忙，快一个月没更新博客了，貌似有些忘了MarkDown的语法，这里记录下MarkDown语法作备忘录，以后方便查找。&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="https://tangyanqiong.com/categories/Others/"/>
    
    
      <category term="MarkDown" scheme="https://tangyanqiong.com/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>Vue主题import出错</title>
    <link href="https://tangyanqiong.com/post/52c1147f.html"/>
    <id>https://tangyanqiong.com/post/52c1147f.html</id>
    <published>2019-08-01T03:52:00.000Z</published>
    <updated>2020-03-25T08:53:59.213Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在main.js文件中import<strong>‘../theme/index.css’</strong> 报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ERROR  Failed to compile with 1 errors </span><br><span class="line">                                                                                                                                                                                             </span><br><span class="line">This relative module was not found:</span><br><span class="line"></span><br><span class="line">* ../theme/index.css in ./src/main.js</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>原来在webpack.base.conf.js中有导入过如下代码，可能是webpack.base.conf.js和utils.js重复编译SCSS文件导致报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 导入SCSS</span><br><span class="line">&#123;</span><br><span class="line">   test: /\.(scss|css)?$/,</span><br><span class="line">   loaders: [&quot;style&quot;, &quot;css&quot;, &quot;sass&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>删除上述在webpack.base.conf.js中导入的SCSS代码，即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;在main.js文件中import&lt;strong&gt;‘../theme/index.css’&lt;/strong&gt; 报错：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR  Failed to compile with 1 errors &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                                                                                                                                                             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This relative module was not found:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* ../theme/index.css in ./src/main.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web" scheme="https://tangyanqiong.com/categories/Web/"/>
    
      <category term="Vue" scheme="https://tangyanqiong.com/categories/Web/Vue/"/>
    
    
      <category term="Vue" scheme="https://tangyanqiong.com/tags/Vue/"/>
    
      <category term="CSS" scheme="https://tangyanqiong.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目缩进问题</title>
    <link href="https://tangyanqiong.com/post/db5c826e.html"/>
    <id>https://tangyanqiong.com/post/db5c826e.html</id>
    <published>2019-07-30T09:50:46.000Z</published>
    <updated>2019-07-31T02:01:29.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>WebStorm的缩进规则和ESlint-vue的校验规则冲突引起的问题。</p><h4 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h4><ul><li>Vue项目</li><li>安装时打开ESLint校验功能</li><li>开发工具WebStorm</li></ul><p>代码格式化会出现两种：</p><a id="more"></a><p><strong>WebStorm格式化：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    exports default &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>ESlint格式化：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">exports default &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>打开项目根下的.eslintrc.js文件，将rules节点中添加以下配置项，其中’2’是指统一缩进2个空格，’1’是指1倍缩进。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;vue/script-indent&apos;: [&apos;error&apos;, 2, &#123;&apos;baseIndent&apos;: 1&#125;]</span><br></pre></td></tr></table></figure><p>另外需要添加以下节点，与rules节点同级：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">overrides: [</span><br><span class="line">    &#123; &apos;files&apos;: [&apos;*.vue&apos;],</span><br><span class="line">      &apos;rules&apos;: &#123;</span><br><span class="line">      &apos;indent&apos;: &apos;off&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>问题搞定</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;WebStorm的缩进规则和ESlint-vue的校验规则冲突引起的问题。&lt;/p&gt;
&lt;h4 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Vue项目&lt;/li&gt;
&lt;li&gt;安装时打开ESLint校验功能&lt;/li&gt;
&lt;li&gt;开发工具WebStorm&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码格式化会出现两种：&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://tangyanqiong.com/categories/Web/"/>
    
      <category term="Vue" scheme="https://tangyanqiong.com/categories/Web/Vue/"/>
    
    
      <category term="Vue" scheme="https://tangyanqiong.com/tags/Vue/"/>
    
      <category term="ESLint" scheme="https://tangyanqiong.com/tags/ESLint/"/>
    
      <category term="WebStorm" scheme="https://tangyanqiong.com/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title>Github代码下载提速</title>
    <link href="https://tangyanqiong.com/post/1e0383f0.html"/>
    <id>https://tangyanqiong.com/post/1e0383f0.html</id>
    <published>2019-07-25T08:06:27.000Z</published>
    <updated>2019-07-26T09:42:14.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前pod install安装GRPC出现各种错误，在网上找了各种办法，还重装过git以及pod都没有用，还是报类似如下错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[!] Error installing !ProtoCompiler</span><br><span class="line">[!] /usr/bin/curl -f -L -o /var/folders/1s/jw93vj050vq92gbrjv1c3x880000gn/T/d20190718-18563-1fzxwnx/file.zip https://github.com/google/protobuf/releases/download/v3.8.0/protoc-3.8.0-osx-x86_64.zip --create-dirs --netrc-optional --retry 2</span><br><span class="line"></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   162    0   162    0     0     11      0 --:--:--  0:00:14 --:--:--    39</span><br><span class="line">100   617    0   617    0     0     40      0 --:--:--  0:00:15 --:--:--  602k</span><br><span class="line"> 10 2794k   10  305k    0     0    835      0  0:57:06  0:06:14  0:50:52     0</span><br><span class="line">curl: (56) LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54</span><br><span class="line"></span><br><span class="line">[!] Error installing BoringSSL-GRPC</span><br><span class="line">[!] /usr/bin/git clone https://github.com/google/boringssl.git /var/folders/1s/jw93vj050vq92gbrjv1c3x880000gn/T/d20190718-18162-1vck5op --template=</span><br><span class="line"></span><br><span class="line">Cloning into &apos;/var/folders/1s/jw93vj050vq92gbrjv1c3x880000gn/T/d20190718-18162-1vck5op&apos;...</span><br><span class="line">error: RPC failed; curl 18 transfer closed with outstanding read data remaining</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure><p>之前没想过是网络的原因导致，因为挂VPN也出现了这种情况，后来一一排除，pod install –verbose 打印log，才发现根本就是github下载速度过慢，甚至连接超时导致。</p><p><strong>那怎么来提高github下载代码的速度呢？</strong></p><a id="more"></a><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="获取IP地址"><a href="#获取IP地址" class="headerlink" title="获取IP地址"></a>获取IP地址</h2><p>点击进入<a href="https://www.ipaddress.com/" target="_blank" rel="noopener">获取IP网址</a>，获取到本机对应以下三个网址的IP地址。</p><ul><li>github.com</li><li>github.global.ssl.fastly.net</li><li>codeload.github.com</li></ul><p><img src="https://i.loli.net/2019/07/25/5d396bea1360952904.png" alt="20190126112912387.png"></p><p>每个人的都不一样，这是我获取到的IP地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">140.82.113.4 github.com</span><br><span class="line">151.101.185.194 github.global.ssl.fastly.net</span><br><span class="line">140.82.114.9 codeload.github.com</span><br></pre></td></tr></table></figure><h2 id="修改系统hosts文件"><a href="#修改系统hosts文件" class="headerlink" title="修改系统hosts文件"></a>修改系统hosts文件</h2><h3 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h3><ul><li>hosts文件路径：C:\Windows\System32\drivers\etc\hosts ,</li><li>添加上面查询到的IP到hosts文件中（此时可能需要管理员权限,可以将hosts复制到桌面，修改好了再复制回去覆盖原来的）</li><li>修改完成后刷新DNS<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure></li></ul><h3 id="Mac系统"><a href="#Mac系统" class="headerlink" title="Mac系统"></a>Mac系统</h3><p>在Finder-&gt;前往-&gt;前往文件夹，在框里输入/etc/hosts，找到hosts文件，可以将hosts文件复制到桌面，将ip地址添加到里面，修改好了再复制回去覆盖原来的hosts文件。</p><p><img src="https://i.loli.net/2019/07/25/5d396ef17c57396896.png" alt="82A13670-2C3E-445D-9E10-4088F2E438AD.png"><br>最后在终端执行刷新DNS命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dscacheutil -flushcache</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>提速前的效果未截图，反正最快就是10多kb的样子，提速后效果如下：</p><p><img src="https://i.loli.net/2019/07/25/5d3970549b23037785.png" alt="68073D99-C3D9-4541-8E8A-B20C08C59A61.png"></p><p>GRPC报错的相关问题也迎刃而解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前pod install安装GRPC出现各种错误，在网上找了各种办法，还重装过git以及pod都没有用，还是报类似如下错误。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[!] Error installing !ProtoCompiler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[!] /usr/bin/curl -f -L -o /var/folders/1s/jw93vj050vq92gbrjv1c3x880000gn/T/d20190718-18563-1fzxwnx/file.zip https://github.com/google/protobuf/releases/download/v3.8.0/protoc-3.8.0-osx-x86_64.zip --create-dirs --netrc-optional --retry 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                 Dload  Upload   Total   Spent    Left  Speed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100   162    0   162    0     0     11      0 --:--:--  0:00:14 --:--:--    39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100   617    0   617    0     0     40      0 --:--:--  0:00:15 --:--:--  602k&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 10 2794k   10  305k    0     0    835      0  0:57:06  0:06:14  0:50:52     0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl: (56) LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[!] Error installing BoringSSL-GRPC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[!] /usr/bin/git clone https://github.com/google/boringssl.git /var/folders/1s/jw93vj050vq92gbrjv1c3x880000gn/T/d20190718-18162-1vck5op --template=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cloning into &amp;apos;/var/folders/1s/jw93vj050vq92gbrjv1c3x880000gn/T/d20190718-18162-1vck5op&amp;apos;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error: RPC failed; curl 18 transfer closed with outstanding read data remaining&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fatal: The remote end hung up unexpectedly&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fatal: early EOF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fatal: index-pack failed&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之前没想过是网络的原因导致，因为挂VPN也出现了这种情况，后来一一排除，pod install –verbose 打印log，才发现根本就是github下载速度过慢，甚至连接超时导致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那怎么来提高github下载代码的速度呢？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="https://tangyanqiong.com/categories/Others/"/>
    
    
      <category term="GRPC" scheme="https://tangyanqiong.com/tags/GRPC/"/>
    
      <category term="Github" scheme="https://tangyanqiong.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Swift上View手势控制</title>
    <link href="https://tangyanqiong.com/post/a17aa0f4.html"/>
    <id>https://tangyanqiong.com/post/a17aa0f4.html</id>
    <published>2019-06-03T07:31:20.000Z</published>
    <updated>2019-06-06T02:00:27.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对View进行放大缩小、移动、旋转，其实是很常见的需求，最开始在OC上，很早的几年，还是用的touch事件来实现，这种实现方式很繁琐，呈现的效果也不是很好。</p><p>后来，苹果也逐步的淘汰了这种方式，出了手势这种模式，极大程度上的缩减了代码量，而且操作简单，上手迅速，OC上手势的使用方式网上比比皆是，这里就不细说，着重介绍Swift View手势控制方法。</p><a id="more"></a><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>添加旋转、缩放、移动手势，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//Rotation</span><br><span class="line">let rotationGestureRecognizer = UIRotationGestureRecognizer(target: self, action: #selector(EditPhotoViewController.rotateView(_:)))</span><br><span class="line">photoImageView?.addGestureRecognizer(rotationGestureRecognizer)</span><br><span class="line"></span><br><span class="line">//Scale pinch</span><br><span class="line">let pinchGestureRecognizer = UIPinchGestureRecognizer(target: self, action: #selector(EditPhotoViewController.pinchView(_:)))</span><br><span class="line">photoImageView?.addGestureRecognizer(pinchGestureRecognizer)</span><br><span class="line"></span><br><span class="line">//Move</span><br><span class="line">let panGestureRecognizer = UIPanGestureRecognizer(target: self, action: #selector(EditPhotoViewController.panView(_:)))</span><br><span class="line">photoImageView?.addGestureRecognizer(panGestureRecognizer)</span><br></pre></td></tr></table></figure><p><strong>以下代码使用变量如下：</strong></p><blockquote><p>  private var cropFrame = CGRect.zero //图片上限制框的frame</p></blockquote><blockquote><p>  private var latestFrame = CGRect.zero //最大缩放frame</p></blockquote><blockquote><p>   private var rotationAngle: CGFloat = 0.0 //旋转的角度</p></blockquote><p><strong>给变量设置初始值：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private func resetShowImageViewFrame() &#123;</span><br><span class="line">   rotationAngle = 0.0</span><br><span class="line"></span><br><span class="line">   photoImageView?.image = originalImage</span><br><span class="line">   photoImageView?.transform = .identity</span><br><span class="line"></span><br><span class="line">   // scale to fit the screen</span><br><span class="line">   cropFrame = photoOverLayView?.transparentArea ?? CGRect.zero</span><br><span class="line"></span><br><span class="line">   var oriWidth: CGFloat = cropFrame.size.width</span><br><span class="line">   var oriHeight: CGFloat = (originalImage?.size.height ?? 0.0) * (oriWidth / (originalImage?.size.width ?? 0.0))</span><br><span class="line">   if ((originalImage?.size.width)!/(originalImage?.size.height)!) &gt; (CGFloat)(standardPostImgWidth)/(CGFloat)(standardPostImgHeight) &#123;</span><br><span class="line">      oriHeight = cropFrame.size.height</span><br><span class="line">      oriWidth = (originalImage?.size.width ?? 0.0) * (oriHeight / (originalImage?.size.height ?? 0.0))</span><br><span class="line">   &#125;</span><br><span class="line">   let oriX: CGFloat = cropFrame.origin.x + (cropFrame.size.width - oriWidth) / 2</span><br><span class="line">   let oriY: CGFloat = cropFrame.origin.y + (cropFrame.size.height - oriHeight) / 2</span><br><span class="line">   oldFrame = CGRect(x: oriX, y: oriY, width: oriWidth, height: oriHeight)</span><br><span class="line">   latestFrame = oldFrame</span><br><span class="line">   photoImageView?.frame = oldFrame</span><br><span class="line">   largeFrame = CGRect(x: 0, y: 0, width: limitRatio * oldFrame.size.width, height: limitRatio * oldFrame.size.height)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="旋转实现"><a href="#旋转实现" class="headerlink" title="旋转实现"></a>旋转实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@objc func rotateView(_ rotationGestureRecognizer: UIRotationGestureRecognizer?) &#123;</span><br><span class="line">   let view: UIView? = photoImageView</span><br><span class="line">   if rotationGestureRecognizer?.state == .began || rotationGestureRecognizer?.state == .changed &#123;</span><br><span class="line">      view?.transform = (view?.transform.rotated(by: (rotationGestureRecognizer?.rotation)!))!</span><br><span class="line">      rotationAngle = rotationAngle + (rotationGestureRecognizer?.rotation ?? 0.0)</span><br><span class="line">      rotationGestureRecognizer?.rotation = 0</span><br><span class="line">   &#125; else if rotationGestureRecognizer?.state == .ended &#123;</span><br><span class="line">      latestFrame = photoImageView?.frame ?? CGRect.zero</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缩放实现"><a href="#缩放实现" class="headerlink" title="缩放实现"></a>缩放实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@objc func pinchView(_ pinchGestureRecognizer: UIPinchGestureRecognizer?) &#123;</span><br><span class="line">   let view: UIView? = photoImageView</span><br><span class="line">   if pinchGestureRecognizer?.state == .began || pinchGestureRecognizer?.state == .changed &#123;</span><br><span class="line">      if rotationAngle == 0 &#123;</span><br><span class="line">       //narrow</span><br><span class="line">         if (pinchGestureRecognizer?.scale)! &lt;= CGFloat(1.0) &amp;&amp; ((photoImageView?.width)! &lt;= cropFrame.size.width || (photoImageView?.height)! &lt;= cropFrame.size.height) &#123;</span><br><span class="line">            return</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       //amplification</span><br><span class="line">       if (pinchGestureRecognizer?.scale)! &gt; CGFloat(1.0) &amp;&amp; ((photoImageView?.width)! &gt; 5000 || (photoImageView?.height)! &gt; 5000) &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        view?.transform = (view?.transform.scaledBy(x: (pinchGestureRecognizer?.scale)!, y: (pinchGestureRecognizer?.scale)!))!</span><br><span class="line">        pinchGestureRecognizer?.scale = 1</span><br><span class="line">    &#125; else if pinchGestureRecognizer?.state == .ended &#123;</span><br><span class="line">        if rotationAngle == 0 &#123;</span><br><span class="line">            var newFrame: CGRect? = photoImageView?.frame</span><br><span class="line">            //newFrame = handleScaleOverflow(newFrame ?? CGRect.zero)</span><br><span class="line">            newFrame = handleBorderOverflow(newFrame ?? CGRect.zero)</span><br><span class="line">            UIView.animate(withDuration: TimeInterval(BOUNDCE_DURATION), animations: &#123;</span><br><span class="line">            self.photoImageView?.frame = newFrame ?? CGRect.zero</span><br><span class="line">            self.latestFrame = newFrame ?? CGRect.zero</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            latestFrame = photoImageView?.frame ?? CGRect.zero</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平移实现"><a href="#平移实现" class="headerlink" title="平移实现"></a>平移实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@objc func panView(_ panGestureRecognizer: UIPanGestureRecognizer?)</span><br><span class="line">&#123;</span><br><span class="line">   let view = panGestureRecognizer?.view;</span><br><span class="line">   if (panGestureRecognizer?.state == .began || panGestureRecognizer?.state == .changed) &#123;</span><br><span class="line">       let translation = panGestureRecognizer?.translation(in: view?.superview)</span><br><span class="line">       view?.center = CGPoint(x: (view?.center.x)! + (translation?.x)!, y: (view?.center.y)! + (translation?.y)!)</span><br><span class="line">       panGestureRecognizer?.setTranslation(CGPoint.zero, in: view?.superview)</span><br><span class="line">    &#125; else if panGestureRecognizer?.state == .ended &#123;</span><br><span class="line">        if rotationAngle == 0 &#123;</span><br><span class="line">           //bounce to original frame</span><br><span class="line">           var newFrame: CGRect? = photoImageView?.frame</span><br><span class="line">           newFrame = handleBorderOverflow(newFrame ?? CGRect.zero)</span><br><span class="line">           UIView.animate(withDuration: TimeInterval(BOUNDCE_DURATION), animations: &#123;</span><br><span class="line">               self.photoImageView?.frame = newFrame ?? CGRect.zero</span><br><span class="line">               self.latestFrame = newFrame ?? CGRect.zero</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">           latestFrame = photoImageView?.frame ?? CGRect.zero</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="https://i.loli.net/2019/06/03/5cf4ed0771faf64108.gif" alt="未命名.gif"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;对View进行放大缩小、移动、旋转，其实是很常见的需求，最开始在OC上，很早的几年，还是用的touch事件来实现，这种实现方式很繁琐，呈现的效果也不是很好。&lt;/p&gt;
&lt;p&gt;后来，苹果也逐步的淘汰了这种方式，出了手势这种模式，极大程度上的缩减了代码量，而且操作简单，上手迅速，OC上手势的使用方式网上比比皆是，这里就不细说，着重介绍Swift View手势控制方法。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://tangyanqiong.com/categories/iOS/"/>
    
      <category term="Swift" scheme="https://tangyanqiong.com/categories/iOS/Swift/"/>
    
    
      <category term="Swift" scheme="https://tangyanqiong.com/tags/Swift/"/>
    
      <category term="手势控制" scheme="https://tangyanqiong.com/tags/%E6%89%8B%E5%8A%BF%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>iPad控制多屏电视</title>
    <link href="https://tangyanqiong.com/post/a503d77d.html"/>
    <id>https://tangyanqiong.com/post/a503d77d.html</id>
    <published>2019-05-30T07:46:42.000Z</published>
    <updated>2019-07-26T09:48:49.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们公司有4个电视（内置机顶盒），用来展示公司的业务，平时经常会有客户来参观，电视下面是通过HDMI线连接的电脑，展示的实际是网页。</p><fancybox><img src="https://i.loli.net/2019/05/31/5cf0923211c8d15084.jpg" alt="5cef8c97a983892634.jpg"></fancybox><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>昨天下午领导提一个需求，因为演示的时候，需要操作，就得用电脑的鼠标在电视上点，屏幕太大鼠标又在电视下方，很不方便，不好操作，然后想借鉴别人公司，直接用iPad里控制4个电视来操作。</p><a id="more"></a><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p><strong>用iPad来控制电视屏幕，是不是一听就很高大？</strong></p><p>哈哈，怎么控制？都不是一个系统，一个是windows系统，一个是iOS系统。讨论时，我提出了两个方案：</p><ul><li><ol><li>做个APP，把网页内嵌到里面，直接用自带的AirPlay把iPad投屏到电视，不用的电视，再切换投屏，这样在iPad上操作就会同步到电视。</li></ol></li><li><ol start="2"><li>因为展示的业务是web页，那么就用APP，在同一局域网给Web端发指令，或通过后台中转指令，以控制在电视上展示的网页。</li></ol></li></ul><h2 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h2><h3 id="1-投屏方案"><a href="#1-投屏方案" class="headerlink" title="1. 投屏方案"></a>1. 投屏方案</h3><p>这个方案，实际是时间成本最少的，说干就干，然后马上我这边就起了一个项目，嵌了一个网页在APP里，好吧，正式开始投屏，然后…</p><p><strong>结果：</strong></p><p>投屏是成功了的，但是呢，因为电视的屏幕比是16:9，而iPad是4:3，导致了在电视上，iPad的投屏屏幕显示不全，两边还有间隙，不是全屏，而且当初web端开发的网页尺寸也是固定的1920x1080，也就是为电视量身定做的，这个网页在iPad上也不能全屏显示。</p><p>这种硬件上及网页端的限制，不好改变，就放弃了这种方式。</p><h3 id="2-指令控制方案"><a href="#2-指令控制方案" class="headerlink" title="2. 指令控制方案"></a>2. 指令控制方案</h3><p>这个方案，需要和web端约定很多指令，基本指令像点击不同按钮的不同指令，而且比如上下滑动网页的距离，由于屏幕分辨率不一样，需要经过一定转换，才能是web端的对应距离等等问题。</p><p><strong>结果：</strong></p><p>诚如上面所说，这个开发成本会很大，而且有局限性，一旦网页内容改变，APP端需改动代码升级才能使用，这种做法不符合产品经理的预期，所以直接淘汰了。</p><h2 id="另辟蹊径"><a href="#另辟蹊径" class="headerlink" title="另辟蹊径"></a>另辟蹊径</h2><p>上面的两个方案告吹后，给产品经理说了结果，然后产品经理在网上找到了另一种方案，就是市面上这种类似TeamViewer的远程操控桌面软件，直接在iPad上安装软件，然后在PC上安装同样软件，使用iPad操控PC桌面。</p><h3 id="两种方案"><a href="#两种方案" class="headerlink" title="两种方案"></a>两种方案</h3><p>有了这个方案，就在网上找到了<a href="https://sunlogin.oray.com/zh_CN/" target="_blank" rel="noopener">向日葵</a>、<a href="https://www.splashtop.com/cn" target="_blank" rel="noopener">Splashtop</a>，这两个软件支持多端连接。</p><h4 id="1-向日葵"><a href="#1-向日葵" class="headerlink" title="1. 向日葵"></a>1. 向日葵</h4><p>安装和使用都比较简单，APP风格符合中国人的操作习惯，每次连接PC端都需要输入验证码（PC端的向日葵软件上），这样的话，每次切换连接不同电脑比较慢，操作体验不好。</p><fancybox><img src="https://i.loli.net/2019/05/30/5cefa66c0e85747877.png" alt="BAB22DB7-DCF2-460C-A034-F576BB64AF0F.png"></fancybox><h4 id="2-Splashtop"><a href="#2-Splashtop" class="headerlink" title="2. Splashtop"></a>2. Splashtop</h4><p>同样的，安装和使用都比较简单，是国外软件，风格偏欧美风，我其实比较喜欢这种操作方式，简单易懂，连接同一个电脑，连续输入两次验证码，下次再点击接该电脑就直接连接了。</p><fancybox><img src="https://i.loli.net/2019/05/30/5cefa66bdd93468731.jpg" alt="28ABD3EAB7E73EC5D89DD79D1255881D.jpg"></fancybox><p><strong>对比这两个软件，Splashtop切换不同电脑连接要更快些，而且不用每次都输验证码，相对方便些，所以就给产品经理推荐了这个软件来操作。</strong></p><h3 id="最终实施"><a href="#最终实施" class="headerlink" title="最终实施"></a>最终实施</h3><p>哈哈，以为这就OK了吗，NO，今天来公司，产品经理说昨晚给CEO看了，CEO觉得这样切换还是太慢，给了个建议，让4个电视通过HDMI方式连到一个电脑上，这样的话就用iPad操控一台电脑就可以了，不存在切换慢的问题了，仔细想了下，这种方案还真不错，有可行性，然后开撸，将4台电视连接到了一台电脑上（专门有HDMI拓展外接，所以接口足够），然后分屏显示。</p><h4 id="1-Splashtop连接"><a href="#1-Splashtop连接" class="headerlink" title="1. Splashtop连接"></a>1. Splashtop连接</h4><p>其实我真的是蛮喜欢Splashtop的，操作简单，可惜的是Splashtop只支持双屏显示，切换分屏始终只显示第1第2分屏。</p><fancybox><img src="https://i.loli.net/2019/05/30/5cefa66c15f5d36721.png" alt="DDC6ECBC-354F-477B-9DE6-930C9D6395BC.png"></fancybox><h4 id="2-向日葵连接"><a href="#2-向日葵连接" class="headerlink" title="2. 向日葵连接"></a>2. 向日葵连接</h4><p>换了向日葵来连接，满怀期望的希望它支持多屏，结果不负众望，4台分屏完美切换，速度流畅，好，就用它了。</p><fancybox><img src="https://i.loli.net/2019/05/30/5cefa66c1250218113.png" alt="B6B92F41-17AA-49AF-B2EF-73869B6C73F8.png"></fancybox><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说，这次需求完成还是比较满意的，上面领导也满意这个结果，这次分享希望能给需要iPad控制多屏电视的人带来帮助，有什么问题请在评论区告诉我吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;我们公司有4个电视（内置机顶盒），用来展示公司的业务，平时经常会有客户来参观，电视下面是通过HDMI线连接的电脑，展示的实际是网页。&lt;/p&gt;
&lt;fancybox&gt;&lt;img src=&quot;https://i.loli.net/2019/05/31/5cf0923211c8d15084.jpg&quot; alt=&quot;5cef8c97a983892634.jpg&quot;&gt;&lt;/fancybox&gt;

&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;昨天下午领导提一个需求，因为演示的时候，需要操作，就得用电脑的鼠标在电视上点，屏幕太大鼠标又在电视下方，很不方便，不好操作，然后想借鉴别人公司，直接用iPad里控制4个电视来操作。&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="https://tangyanqiong.com/categories/Others/"/>
    
    
      <category term="iPad控制多屏" scheme="https://tangyanqiong.com/tags/iPad%E6%8E%A7%E5%88%B6%E5%A4%9A%E5%B1%8F/"/>
    
      <category term="远程桌面控制" scheme="https://tangyanqiong.com/tags/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E6%8E%A7%E5%88%B6/"/>
    
      <category term="向日葵" scheme="https://tangyanqiong.com/tags/%E5%90%91%E6%97%A5%E8%91%B5/"/>
    
      <category term="Splashtop" scheme="https://tangyanqiong.com/tags/Splashtop/"/>
    
  </entry>
  
  <entry>
    <title>Vue框架底层原理</title>
    <link href="https://tangyanqiong.com/post/d32be447.html"/>
    <id>https://tangyanqiong.com/post/d32be447.html</id>
    <published>2019-03-20T09:58:17.000Z</published>
    <updated>2019-07-26T09:44:56.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Vue框架是什么，怎么用，相信大家都已经很熟悉了，诚如<a href="https://www.runoob.com/vue2/vue-tutorial.html" target="_blank" rel="noopener">Vue教程</a>所说，它是一套构建用户界面的渐进式Web前端框架。</p><fancybox><img src="https://i.loli.net/2019/05/27/5ceb976f6b4eb74810.png" alt="image"></fancybox><p>但是很多人就是拿来主义，就只管用，博主也是这类人 = =!, 但是随着深入使用Vue，越发觉得深知其原理的重要性，那么，本文来探讨一下Vue的底层原理到底是什么，是怎么实现的。</p><a id="more"></a><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>Vue的底层原理总体来说就是深入响应式原理，它最独特的特性之一就是非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新，这使得状态管理非常简单直接。</p><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3><p>下面是一段代码，较直观的体现了Vue特点，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;mvvm-app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;word&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;word&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;sayHi&quot;&gt;change model&lt;/button&gt; //点击这个button，word的值会发生改变</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;./js/observer.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/watcher.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/compile.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/mvvm.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new MVVM(&#123;</span><br><span class="line">        el: &apos;#mvvm-app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            word: &apos;Hello World!&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            sayHi: function() &#123;</span><br><span class="line">                this.word = &apos;Hi, everybody!&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>实现效果如下：</strong></p><p><img src="https://i.loli.net/2019/05/27/5ceba18d75b1079687.gif" alt="vue_test.gif"></p><p>而Vue实现数据双向绑定的效果，需要<strong>三大模块：</strong></p><ul><li><ol><li>Observer：对数据对象的所有属性进行监听，如有变动可拿到最新值并通知观察者</li></ol></li><li><ol start="2"><li>Compile：对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数</li></ol></li><li><ol start="3"><li>Watcher：作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</li></ol></li></ul><fancybox><img src="https://i.loli.net/2019/05/27/5ceba2641810f80268.png" alt="vue_test2.png"></fancybox><h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><p>Observer的核心是通过Obeject.defineProperty()来监听数据的变动，这个函数内部可以定义setter和getter，每当数据发生变化，就会触发setter。这时候Observer就要通知订阅者，订阅者就是Watcher。</p><h3 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h3><p>Watcher订阅者作为Observer和Compile之间通信的桥梁，主要做的事情是：</p><ul><li><ol><li>在自身实例化时往属性订阅器(dep)里面添加自己</li></ol></li><li><ol start="2"><li>自身必须有一个update()方法</li></ol></li><li><ol start="3"><li>待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调</li></ol></li></ul><h3 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h3><p>Compile主要做的事情是解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定。</p><p>而Vue框架则是一个提供了 MVVM 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是 MVVM 中的 VM，也就是 ViewModel。 ViewModel负责连接 View 和 Model，保证视图和数据的一致性，这种轻量级的架构让前端开发更加高效、便捷。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Vue框架是什么，怎么用，相信大家都已经很熟悉了，诚如&lt;a href=&quot;https://www.runoob.com/vue2/vue-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue教程&lt;/a&gt;所说，它是一套构建用户界面的渐进式Web前端框架。&lt;/p&gt;
&lt;fancybox&gt;&lt;img src=&quot;https://i.loli.net/2019/05/27/5ceb976f6b4eb74810.png&quot; alt=&quot;image&quot;&gt;&lt;/fancybox&gt;

&lt;p&gt;但是很多人就是拿来主义，就只管用，博主也是这类人 = =!, 但是随着深入使用Vue，越发觉得深知其原理的重要性，那么，本文来探讨一下Vue的底层原理到底是什么，是怎么实现的。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://tangyanqiong.com/categories/Web/"/>
    
      <category term="Vue" scheme="https://tangyanqiong.com/categories/Web/Vue/"/>
    
    
      <category term="JavaScript" scheme="https://tangyanqiong.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="https://tangyanqiong.com/tags/Vue/"/>
    
      <category term="MVVM" scheme="https://tangyanqiong.com/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>初探JavaScript的变量</title>
    <link href="https://tangyanqiong.com/post/6e5ac6c0.html"/>
    <id>https://tangyanqiong.com/post/6e5ac6c0.html</id>
    <published>2019-02-25T08:12:34.000Z</published>
    <updated>2019-07-26T09:43:36.296Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本类型和引用类型的值"><a href="#基本类型和引用类型的值" class="headerlink" title="基本类型和引用类型的值"></a>基本类型和引用类型的值</h3><p><code>ECMAScript</code>变量一般有两种数据类型的值：<strong>基本类型和引用类型</strong>。</p><ul><li>基本类型： 简单的数据段：<code>Undefined, Null, Boolean, Number, String</code></li><li>引用类型：多个值构成的对象；</li></ul><a id="more"></a><h4 id="1-动态的属性"><a href="#1-动态的属性" class="headerlink" title="1. 动态的属性"></a>1. 动态的属性</h4><p>定义两者的值：创建一个变量并为其变量赋值；</p><p>执行两者的值：</p><ul><li>引用类型：可以添加、删除属性和方法；</li><li>基本类型：不能添加、删除属性和方法；</li></ul><p>比如：引用类型 a，可以添加属性 name age<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">a.name = <span class="string">"杨子龙"</span>;</span><br><span class="line">a.age = <span class="number">24</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name);                      <span class="comment">//杨子龙</span></span><br></pre></td></tr></table></figure></p><p>基本类型 name 无法添加属性 age<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"杨子龙"</span>;</span><br><span class="line">name.age  = <span class="number">24</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name.age);                 <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><p>代码中可知：只能给引用类型值动态地添加属性，以便将来使用。</p><h4 id="2-赋值变量值"><a href="#2-赋值变量值" class="headerlink" title="2. 赋值变量值"></a>2. 赋值变量值</h4><p>从一个变量向另一个变量复制基本类型值和引用类型值时：</p><ul><li>基本类型：在变量对象上创建一个新值，并将其值复制给新变量分配的位置上；（完全独立的两个变量）<br>例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"><span class="built_in">console</span>.log(b);                 <span class="comment">//111</span></span><br></pre></td></tr></table></figure><p>代码中可知：变量b的值只是变量a的值的一个副本，两者的值111是完全独立的。</p><ul><li>引用类型：将存储在变量对象中的值复制一份放到为新变量分配的空间中；（引用同一个对象的两个变量）</li></ul><p>引用类型的值的副本实际是一个指针，指向存储在堆中的一个对象。<br>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj1.name = <span class="string">"杨子龙"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2,name);                 <span class="comment">// Object &#123; name="杨子龙"&#125; 杨子龙</span></span><br></pre></td></tr></table></figure></p><p>代码中可知：obj1和obj2都指向同一个对象Object；所以，为obj1添加的name属性，通过obj2也可以访问的到。</p><h4 id="3-传递参数"><a href="#3-传递参数" class="headerlink" title="3. 传递参数"></a>3. 传递参数</h4><p>我们都知道基本类型是<strong>按值访问</strong>的，因为可以访问保存在变量中的实际的值。<br>所有函数的参数都是<strong>按值传递</strong>的。</p><ul><li>基本类型：基本类型值的传递如同基本类型变量的复制一样；<br>在向参数传递值，被传递的值会被复制给一个局部变量（命名参数），因此这个局部变量的变化不会反映在函数的外部。</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  num += <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> result = fn(a);</span><br><span class="line"><span class="built_in">console</span>.log(result);        <span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(a);             <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>代码中可知：参数num和变量a互不相识，只是有着相同的值而已，用完之后，你还是你，我还是我，互不干政。</p><ul><li>引用类型：引用类型的传递如同引用类型变量的复制一样；<br>在向参数传递值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。</li></ul><p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj.name = <span class="string">'杨子龙'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">fn(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);           <span class="comment">//杨子龙</span></span><br></pre></td></tr></table></figure></p><p>代码中可知：在这个函数内部，参数obj和变量person引用的是同一个对象Object，所以，你不动我也不动，你动我也动，你中有我，我中有你，情义绵绵，经久不息……</p><p>也就是说：即使变量person是按值传递的，但是参数obj（想象成局部变量）还是会按引用来访问同一个对象。</p><blockquote><p> 访问变量有按值和按引用两种方式，参数只能按值传递。</p></blockquote><h4 id="4-检测类型"><a href="#4-检测类型" class="headerlink" title="4. 检测类型"></a>4. 检测类型</h4><ul><li>基本类型：<code>typeof</code></li><li>引用类型：<code>instanceof</code>（对象或null）</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'Yang Zilong'</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> e;</span><br><span class="line"><span class="keyword">var</span> g = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="literal">null</span>;  <span class="comment">// 比较特殊</span></span><br><span class="line"><span class="keyword">var</span> h = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b); <span class="comment">//number </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c); <span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> d); <span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> e); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> g); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> f); <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> h); <span class="comment">//object</span></span><br></pre></td></tr></table></figure><blockquote><p>所用引用类型的值都是Object的实例。</p></blockquote><p>如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/.at/i</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);     <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(num <span class="keyword">instanceof</span> <span class="built_in">Object</span>);        <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(num <span class="keyword">instanceof</span> <span class="built_in">Array</span>);         <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern <span class="keyword">instanceof</span> <span class="built_in">Object</span>);    <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>);    <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><blockquote><p>使用<code>instanceof</code>检测基本类型，会返回<code>false</code>，基本类型不是对象。</p></blockquote><ul><li>参考资料：《JavaScript高级程序设计》（第三版）第四章</li><li>同步于： <a href="https://juejin.im/post/5c73a28cf265da2de52d9390" target="_blank" rel="noopener">掘金</a>、<a href="https://www.imooc.com/article/280082" target="_blank" rel="noopener">慕课网</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本类型和引用类型的值&quot;&gt;&lt;a href=&quot;#基本类型和引用类型的值&quot; class=&quot;headerlink&quot; title=&quot;基本类型和引用类型的值&quot;&gt;&lt;/a&gt;基本类型和引用类型的值&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ECMAScript&lt;/code&gt;变量一般有两种数据类型的值：&lt;strong&gt;基本类型和引用类型&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本类型： 简单的数据段：&lt;code&gt;Undefined, Null, Boolean, Number, String&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引用类型：多个值构成的对象；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Web" scheme="https://tangyanqiong.com/categories/Web/"/>
    
      <category term="JS" scheme="https://tangyanqiong.com/categories/Web/JS/"/>
    
    
      <category term="JavaScript" scheme="https://tangyanqiong.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Swift中UILabel设置角标</title>
    <link href="https://tangyanqiong.com/post/f0789496.html"/>
    <id>https://tangyanqiong.com/post/f0789496.html</id>
    <published>2018-12-20T07:10:08.000Z</published>
    <updated>2019-06-06T01:48:00.876Z</updated>
    
    <content type="html"><![CDATA[<p>项目开发中，我们往往会遇到客户提出设置角标的需求，如下图：</p><fancybox><img src="https://i.loli.net/2019/06/03/5cf4c72d425fa66320.png" alt="02B93172-8856-45FA-9591-8430A6D962D2.png"></fancybox><p>这种是怎么实现的呢？</p><a id="more"></a><p>其实也很简单，我们用富文本就能实现这种方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let text = (textLabel.text)!</span><br><span class="line">let attrText = NSMutableAttributedString(string: text)</span><br><span class="line"></span><br><span class="line">var: scaleRange = (text as NSString).range(of: &quot;r&quot;)</span><br><span class="line">attrText.addAttribute(NSAttributedString.Key.font, value: UIFont.systemFont(ofSize: textLabel.font.pointSize*0.8), range: scaleRange) //设置角标的字体大小      </span><br><span class="line">attrText.addAttribute(NSAttributedString.Key.foregroundColor, value: textLabel.textColor, range: scaleRange) //设置角标的字体颜色</span><br><span class="line"></span><br><span class="line">textLabel.attributedText = attrText</span><br></pre></td></tr></table></figure><p>那<strong>-1</strong>在右上角的这种方式又是怎么实现的呢？</p><p>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scaleRange = (text as NSString).range(of: &quot;-1&quot;)</span><br><span class="line">attrText.addAttribute(NSAttributedString.Key.baselineOffset, value: (textLabel.font.pointSize*0.4), range: scaleRange)</span><br></pre></td></tr></table></figure><p><strong>同理，在OC里，同样用富文本也可实现角标显示。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目开发中，我们往往会遇到客户提出设置角标的需求，如下图：&lt;/p&gt;
&lt;fancybox&gt;&lt;img src=&quot;https://i.loli.net/2019/06/03/5cf4c72d425fa66320.png&quot; alt=&quot;02B93172-8856-45FA-9591-8430A6D962D2.png&quot;&gt;&lt;/fancybox&gt;

&lt;p&gt;这种是怎么实现的呢？&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://tangyanqiong.com/categories/iOS/"/>
    
      <category term="Swift" scheme="https://tangyanqiong.com/categories/iOS/Swift/"/>
    
    
      <category term="角标" scheme="https://tangyanqiong.com/tags/%E8%A7%92%E6%A0%87/"/>
    
      <category term="Swift" scheme="https://tangyanqiong.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Git使用命令行管理</title>
    <link href="https://tangyanqiong.com/post/c0119d4f.html"/>
    <id>https://tangyanqiong.com/post/c0119d4f.html</id>
    <published>2018-12-14T14:45:16.000Z</published>
    <updated>2019-07-26T09:48:25.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>平时项目中很常用的代码管理工具就是git了，其实有很好的类似SourceTree这样的工具来管理git，但是本文所讲的是通过终端命令行来管理git。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>Workspace: 工作区</li><li>Index / Stage: 暂存区</li><li>Repository: 仓库区（或本地仓库）</li><li>Remote: 远程仓库</li><li><img src="https://user-images.githubusercontent.com/19526072/49999253-4c690980-ffd1-11e8-892a-bff60b374d12.png" alt="image"></li></ul><a id="more"></a><h1 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h1><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录 git-command 下新建 Git 代码库，（会生成 .git 文件）</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建目录 git-command 并将其初始化为 Git 代码库</span></span><br><span class="line">git init git-command</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从线上获取一个完整的项目代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/yangtao2o/git-command.git</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>Git的设置文件为 <code>.gitconfig</code> ，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示配置信息</span></span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">git config --global</span><br><span class="line"></span><br><span class="line">git config --global user.name <span class="string">"yangtao"</span></span><br><span class="line">git config --global user.email <span class="string">"xxx@.qq.com"</span></span><br></pre></td></tr></table></figure><h3 id="增加、删除文件"><a href="#增加、删除文件" class="headerlink" title="增加、删除文件"></a>增加、删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">git add index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">git add assets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并将这次删除加入暂存区</span></span><br><span class="line">git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件名，并放入暂存区</span></span><br><span class="line">git mv index.html index-new.html</span><br></pre></td></tr></table></figure><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暂存区提交到仓库区 ( -m (msg) )</span></span><br><span class="line">git commit -m <span class="string">"My first commit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定文件提交</span></span><br><span class="line">git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次 commit 之后的变化，直接到仓库区</span></span><br><span class="line">git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有的 diff 信息</span></span><br><span class="line">git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的 commit ，提交上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何变化，则用来改写上一次 commit 的提交信息</span></span><br><span class="line">git commit --amend -m <span class="string">"new commit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次 commit ，并包括指定文件的新变化</span></span><br><span class="line">git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有的本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有的远程分支 ( -r (remotes))</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有的本地分支和远程分支</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch primary</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建，并切换至 该分支</span></span><br><span class="line">git checkout -b primary-yt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建，指向指定 commit</span></span><br><span class="line">git branch [branch] [commitID]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建，与指定的远程分支建立追踪关系</span></span><br><span class="line">git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支 master-yt 到当前分支 master</span></span><br><span class="line">git merge master-yt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个 commit，合并进当前分支</span></span><br><span class="line">git cherry-pick [commitid]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d master-ytt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出标签</span></span><br><span class="line">git tag</span><br></pre></td></tr></table></figure><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h1 id="参考目录"><a href="#参考目录" class="headerlink" title="参考目录"></a>参考目录</h1><ul><li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">Git常用命令</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程 - 廖雪峰的官方网站</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;平时项目中很常用的代码管理工具就是git了，其实有很好的类似SourceTree这样的工具来管理git，但是本文所讲的是通过终端命令行来管理git。&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Workspace: 工作区&lt;/li&gt;
&lt;li&gt;Index / Stage: 暂存区&lt;/li&gt;
&lt;li&gt;Repository: 仓库区（或本地仓库）&lt;/li&gt;
&lt;li&gt;Remote: 远程仓库&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/19526072/49999253-4c690980-ffd1-11e8-892a-bff60b374d12.png&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Others" scheme="https://tangyanqiong.com/categories/Others/"/>
    
    
      <category term="Git" scheme="https://tangyanqiong.com/tags/Git/"/>
    
      <category term="代码管理工具" scheme="https://tangyanqiong.com/tags/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>iOS纯播放器（适配器）</title>
    <link href="https://tangyanqiong.com/post/4d0d70a6.html"/>
    <id>https://tangyanqiong.com/post/4d0d70a6.html</id>
    <published>2018-12-06T02:45:35.000Z</published>
    <updated>2019-07-26T08:18:34.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>以前写过一套播放器，详见<a href="https://tangyanqiong.com/post/70bc6a39.html">iOS流媒体播放器</a>，结合了UI与播放层，集成使用很方便，但是呢，定制性很强，想要修改UI层或新增另外的功能，比较不好拓展，还因为公司播放类的项目很多，也为了能适用到其他项目，不同项目不同UI层或者有些定制化的需求，所以我将UI与播放层进行了拆分，使播放器变得更纯粹。</p><h2 id="诞生"><a href="#诞生" class="headerlink" title="诞生"></a>诞生</h2><p>由此，一个纯播放层播放器<a href="https://github.com/HelloMySugar/TDPlayerLite" target="_blank" rel="noopener">TDPlayerLite</a>应运而生，哈哈，该播放器采取适配器模式，有基于AVPlayer封装的，也可集成其他播放器，例DRM播放器，或者音乐播放器，都可以，这样对在项目中不同地方使用不同播放器提供很大便利。</p><a id="more"></a><h1 id="集成与使用"><a href="#集成与使用" class="headerlink" title="集成与使用"></a>集成与使用</h1><h2 id="实现模式"><a href="#实现模式" class="headerlink" title="实现模式"></a>实现模式</h2><p>TDPlayerLite采用适配器模式，所有对外的方法和代理都放在BasePlayer类，需要集成某播放器时，以集成系统播放器AVPlayer为例，继承BasePlayer类生成ReAVPlayer类，在ReAVPlayer类里实现AVPlayer的装载，也实现BasePlayer类对外暴露的方法。</p><p><strong>优点：这种模式能够快速集成不同播放器到项目中，且不会影响到原项目。</strong></p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>Demo里<strong>PlayerAdapter</strong>直接拖往工程里，就可直接使用。</p><fancybox><img src="https://i.loli.net/2019/06/06/5cf8abee6ba3986818.png" alt="4EAAC825-AA60-432A-9526-1CAD359731CD.png"></fancybox><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="PlayerManager"><a href="#PlayerManager" class="headerlink" title="PlayerManager"></a>PlayerManager</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> 播放器类型，目前有系统播放器及DRM播放器</span><br><span class="line"> */</span><br><span class="line">typedef enum _PlayerManagerType</span><br><span class="line">&#123;</span><br><span class="line">    PlayerManagerTypeNone = 0,</span><br><span class="line">    PlayerManagerTypeAVPlayer = 1,</span><br><span class="line">    PlayerManagerTypeVisualOnPlayer = 2 //DRM</span><br><span class="line">    //还可添加其他类型的播放器</span><br><span class="line">&#125; PlayerManagerType;</span><br></pre></td></tr></table></figure><p>使用PlayerManager类可传入不同类型生成对应播放器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.player = [[PlayerManager manager] getPlayerBy:self.playerView andPlayerType:PlayerManagerTypeVisualOnPlayer];</span><br></pre></td></tr></table></figure><p><strong>若不传入Type，默认生成AVPlayer播放器</strong></p><h3 id="BasePlayer"><a href="#BasePlayer" class="headerlink" title="BasePlayer"></a>BasePlayer</h3><p>它是播放器基类，其实<strong><em>BasePlayer.h</em></strong>里注释已经写得很全面了，每个属性和方法的使用和用途都有注释，这里不赘述了。</p><p>说下BasePlayer这个类的作用，写这个类的目录是为了把与外部交互数据统一化，且把播放器产生的数据全面的归整统一对外提供，后面集成进来的播放器，都继承这个基类，实现其方法。</p><p>例如：</p><fancybox><img src="https://i.loli.net/2019/06/06/5cf8b0b72eee571692.png" alt="4FD04FC9-7DB8-4869-812F-408FD7586879.png"></fancybox><p>此自定义的播放器状态基本概括了全部状态，对用户特别友好，能够在不同状态提示用户，提升了用户体验。</p><p><strong>BTW：</strong>系统播放器AVPlayer经常就有乱调、部分视频状态没有的情况，所以我在ReAVPlayer做了兼容性处理，当你需要集成其他播放器时，也需要做相关处理，保证最外层使用的Player的使用完整性。</p><h3 id="BasePlayer-Methods"><a href="#BasePlayer-Methods" class="headerlink" title="BasePlayer_Methods"></a>BasePlayer_Methods</h3><p>扩展类，可加入BasePlayer的扩展接口或属性。</p><h3 id="ReAVPlayer"><a href="#ReAVPlayer" class="headerlink" title="ReAVPlayer"></a>ReAVPlayer</h3><p>该类继承于BasePlayer，里面装载了系统播放器AVPlayer，使用该类实际就是使用系统播放器，AVPlayer一些兼容性处理也放在了里面。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个播放器我们已经应用到了很多项目中，也已经上线测试了很多版本，已经是很稳定的版本了，不用担心在使用中会出现什么奇怪难解的问题了。</p><p>另，目前TDPlayerLite相当于是一个播放器的适配器，如果你只是单纯的想用一个稳定友好的系统播放器，可直接导入<strong>Players</strong>文件夹使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;以前写过一套播放器，详见&lt;a href=&quot;https://tangyanqiong.com/post/70bc6a39.html&quot;&gt;iOS流媒体播放器&lt;/a&gt;，结合了UI与播放层，集成使用很方便，但是呢，定制性很强，想要修改UI层或新增另外的功能，比较不好拓展，还因为公司播放类的项目很多，也为了能适用到其他项目，不同项目不同UI层或者有些定制化的需求，所以我将UI与播放层进行了拆分，使播放器变得更纯粹。&lt;/p&gt;
&lt;h2 id=&quot;诞生&quot;&gt;&lt;a href=&quot;#诞生&quot; class=&quot;headerlink&quot; title=&quot;诞生&quot;&gt;&lt;/a&gt;诞生&lt;/h2&gt;&lt;p&gt;由此，一个纯播放层播放器&lt;a href=&quot;https://github.com/HelloMySugar/TDPlayerLite&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TDPlayerLite&lt;/a&gt;应运而生，哈哈，该播放器采取适配器模式，有基于AVPlayer封装的，也可集成其他播放器，例DRM播放器，或者音乐播放器，都可以，这样对在项目中不同地方使用不同播放器提供很大便利。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://tangyanqiong.com/categories/iOS/"/>
    
      <category term="OC" scheme="https://tangyanqiong.com/categories/iOS/OC/"/>
    
    
      <category term="Object-C" scheme="https://tangyanqiong.com/tags/Object-C/"/>
    
      <category term="AVPlayer" scheme="https://tangyanqiong.com/tags/AVPlayer/"/>
    
      <category term="DRMPlayer" scheme="https://tangyanqiong.com/tags/DRMPlayer/"/>
    
      <category term="适配器" scheme="https://tangyanqiong.com/tags/%E9%80%82%E9%85%8D%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>学习JavaScript深入系列简要总结</title>
    <link href="https://tangyanqiong.com/post/6ec5e01.html"/>
    <id>https://tangyanqiong.com/post/6ec5e01.html</id>
    <published>2018-10-31T15:07:42.000Z</published>
    <updated>2019-07-26T09:41:49.806Z</updated>
    
    <content type="html"><![CDATA[<h3 id="从原型到原型链"><a href="#从原型到原型链" class="headerlink" title="从原型到原型链"></a>从原型到原型链</h3><p>原文地址：<a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">JavaScript深入之从原型到原型链</a></p><blockquote><p>每一个函数都有一个<code>prototype</code>属性，该属性指向了一个对象，此对象为调用该函数而创建的实例的原型</p></blockquote><p><img src="https://github.com/mqyqingfeng/Blog/raw/master/Images/prototype1.png" alt="构造函数和实例原型的关系图"></p><a id="more"></a><blockquote><p>每一个对象（除null）都具有一个属性：<code>__proto__</code>，这个属性指向该对象的原型</p></blockquote><p><img src="https://github.com/mqyqingfeng/Blog/raw/master/Images/prototype2.png" alt="实例与实例原型的关系图"></p><blockquote><p>每个原型都有一个constructor属性指向关联的构造函数</p></blockquote><p><img src="https://raw.githubusercontent.com/mqyqingfeng/Blog/master/Images/prototype3.png" alt></p><blockquote><p>原型对象是通过 <code>Object</code> 构造函数生成的，最后<code>Object.prototype.__proto__ = null</code></p></blockquote><p><img src="https://github.com/mqyqingfeng/Blog/raw/master/Images/prototype5.png" alt="原型链示意图"></p><h3 id="词法作用域和动态作用域"><a href="#词法作用域和动态作用域" class="headerlink" title="词法作用域和动态作用域"></a>词法作用域和动态作用域</h3><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">JavaScript深入之词法作用域和动态作用域</a></p><blockquote><p>javascript采用的是<code>词法作用域(lexical scoping)</code>，函数的作用域是在函数定义的时候就决定了，而不是调用的时候才决定</p></blockquote><ul><li>词法作用域，即静态作用域，函数的作用域在函数定义的时候就决定了</li><li>动态作用域，函数的作用域是在函数调用的时候才决定</li></ul><h3 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h3><p>当执行一个函数的时候，就会创建一个<code>执行上下文(execution context)</code>，并且压入<code>执行上下文栈(Execution context stack, ESC)</code></p><p>当函数执行完毕的时候，会将函数的<code>执行上下文栈</code>中弹出</p><h3 id="变量对象"><a href="#变量对象" class="headerlink" title="变量对象"></a>变量对象</h3><p>1、全局上下文的变量对象初始化：全局对象</p><p>2、函数上下文的变量对象初始化：只包括<code>Arguments</code>对象</p><p>3、进入执行上下文时：给变量对象添加形参、函数声明、变量声明等初始的属性值</p><p>4、代码执行阶段：再次修改变量对象的属性值</p><p>总结：未进入执行阶段之前，<code>变量对象(VO)</code>中的属性都不能访问！但是进入执行阶段之后，<code>变量对象(VO)</code>转变为了<code>活动对象(AO)</code>，里面的属性都能被访问了，然后开始进行执行阶段的操作。它们其实都是同一个对象，只是处于执行上下文的不同生命周期。</p><p>最后，函数是“第一等公民”，记住这个，变量名称和函数名称相同的声明，优先执行函数声明</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><h3 id="从ECMAScript规范解读this"><a href="#从ECMAScript规范解读this" class="headerlink" title="从ECMAScript规范解读this"></a>从ECMAScript规范解读this</h3><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包是指那些能够访问自由变量的函数。</p><p>自由变量是指在函数中使用的，但既不是参数也不是函数的局部变量的变量。</p><p>那么，闭包 = 函数 + 函数能够访问的自由变量。</p><h3 id="参数按值传递"><a href="#参数按值传递" class="headerlink" title="参数按值传递"></a>参数按值传递</h3><p>ECMAScript中所有函数的参数都是按值传递的。</p><p>即，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制给另一个变量一样。</p><p>参数如果是基本类型是按值传递，如果是引用类型按共享传递。</p><p>共享传递是指，在传递对象的时候，传递对象的引用的副本。</p><h3 id="call和apply的模拟实现"><a href="#call和apply的模拟实现" class="headerlink" title="call和apply的模拟实现"></a>call和apply的模拟实现</h3><p><code>call()</code>在使用一个指定的this值和若干个指定的参数值的前提下，调用某个函数或方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">  <span class="comment">//获取调用call的函数，用this可以获取</span></span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    args.push(<span class="string">'arguments['</span> + i + <span class="string">']'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 把传给call的参数传递给了context.fn函数</span></span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args + <span class="string">')'</span>);</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>apply()</code>同<code>call()</code>，只不过将多个参数值，以数组的形式传入而已。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span>(<span class="params">context, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = <span class="built_in">Object</span>(context) || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">    result = context.fn();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; arr.length; index++) &#123;</span><br><span class="line">      args.push(<span class="string">'arr['</span> + index + <span class="string">']'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args + <span class="string">')'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bind的模拟实现"><a href="#bind的模拟实现" class="headerlink" title="bind的模拟实现"></a>bind的模拟实现</h3><p><code>bind()</code>方法会创建一个新函数。当这个新函数被调用，bind()第一个参数将作为它运行时的this，之后的一系列参数将会在传递的实参前传入，作为它的参数。</p><h3 id="new的模拟实现"><a href="#new的模拟实现" class="headerlink" title="new的模拟实现"></a>new的模拟实现</h3><p>new运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;从原型到原型链&quot;&gt;&lt;a href=&quot;#从原型到原型链&quot; class=&quot;headerlink&quot; title=&quot;从原型到原型链&quot;&gt;&lt;/a&gt;从原型到原型链&lt;/h3&gt;&lt;p&gt;原文地址：&lt;a href=&quot;https://github.com/mqyqingfeng/Blog/issues/2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript深入之从原型到原型链&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每一个函数都有一个&lt;code&gt;prototype&lt;/code&gt;属性，该属性指向了一个对象，此对象为调用该函数而创建的实例的原型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/mqyqingfeng/Blog/raw/master/Images/prototype1.png&quot; alt=&quot;构造函数和实例原型的关系图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://tangyanqiong.com/categories/Web/"/>
    
      <category term="JS" scheme="https://tangyanqiong.com/categories/Web/JS/"/>
    
    
      <category term="JavaScript" scheme="https://tangyanqiong.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>【转】高效学习JavaScript的六个思维技巧</title>
    <link href="https://tangyanqiong.com/post/f78e3d89.html"/>
    <id>https://tangyanqiong.com/post/f78e3d89.html</id>
    <published>2018-10-22T14:11:53.000Z</published>
    <updated>2019-07-26T09:42:39.319Z</updated>
    
    <content type="html"><![CDATA[<p>初始整理于慕课网手记<a href="http://www.imooc.com/article/12113" target="_blank" rel="noopener">高效学习JavaScript的六个思维技巧</a><br><a id="more"></a></p><h2 id="更快学习JavaScript的六个思维技巧"><a href="#更快学习JavaScript的六个思维技巧" class="headerlink" title="更快学习JavaScript的六个思维技巧"></a>更快学习JavaScript的六个思维技巧</h2><blockquote><p><strong>当人们试图学习JavaScript或其他编程语言的时候，他们通常会遇到如下挑战。</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 一些概念让他们感到困惑，特别是如果之前学过其他类型的语言。</span><br><span class="line"></span><br><span class="line">2. 很难找到学习的时间（或者动力）去学习。</span><br><span class="line"></span><br><span class="line">3. 你很容易忘掉之前学到的东西。</span><br><span class="line"></span><br><span class="line">4. JavaScript工具太多并且经常更新，以至于很难找到学习的切入点。</span><br><span class="line"></span><br><span class="line">5. ...</span><br></pre></td></tr></table></figure><p><strong>幸运的是，这些难题最终能够被克服。在这篇文章，我将展示六个能够帮助你更快、更开心、更高效地学习JavaScript的六个思维技巧。</strong></p><h3 id="1、不要让对未来的忧虑干扰你现在的学习"><a href="#1、不要让对未来的忧虑干扰你现在的学习" class="headerlink" title="1、不要让对未来的忧虑干扰你现在的学习"></a>1、不要让对未来的忧虑干扰你现在的学习</h3><blockquote><p>有些JavaScript初学者会问刚开始要学习哪种框架，但是如果你还没能熟练使用原生JavaScript，你就不应该问这种问题。因为你会花很多时间研究各种框架而得不到进步。</p></blockquote><blockquote><p>走出这个陷阱的一个方法是制定一个学习路径图。例如，要成为前端开发，你的路径图可能是下图。在将来你能够使用HTML和CSS制作动态页面。</p></blockquote><p><img src="http://img.mukewang.com/57ad9d660001149f07470214.png" alt="前端开发学习路径图"></p><h3 id="2、不要让自信骗你进入持续遗忘的陷阱"><a href="#2、不要让自信骗你进入持续遗忘的陷阱" class="headerlink" title="2、不要让自信骗你进入持续遗忘的陷阱"></a>2、不要让自信骗你进入持续遗忘的陷阱</h3><p><strong>快速理解一个概念会是JavaScript进步的最大阻碍，下面我将解释。</strong></p><blockquote><p>当你遇到一个知识点，而你好像理解了，你很可能抑制不住内心跳到下一个知识点的冲动。</p></blockquote><blockquote><p>现实可能是你会理解下一个知识点然后继续跳到下一个知识点。</p></blockquote><blockquote><p>但是，很快你会到达一个节点，在这个节点你发现自己已经忘了前面所学，于是你需要回过头复习，你快速瞟了一下之前所学然后又继续学习新的知识。</p></blockquote><blockquote><p>   但是现在，你忘记了其他东西。</p></blockquote><blockquote><p>   你一直重复这种继续-回顾-继续-回顾模式直到你发现自己完全迷失。</p><p>   你开始沮丧，想要休息，然后当你开始重振旗鼓，却发现自己已经忘掉所有。</p></blockquote><p><strong>幸运的是，我们有两个应对上述问题的方法：</strong></p><ul><li><p>一次只学一样东西；</p></li><li><p>做练习——实际就是敲代码；</p></li></ul><blockquote><p>   当你学习一个新的概念，你要将它实践出来，练习它，与它和善相处，甚至能够将它与其他概念联系到一起。</p></blockquote><blockquote><p>   当你学习一个示例，最重要的是你要自己将代码敲出来，这样能帮助你吸收它。另外，一次只学一个东西能够帮助你巩固所学，因为记忆更少的东西更容易。</p></blockquote><p><strong>这个过程看起来貌似比阅读然后快速跳到下一个知识点要花费更长的时间，但是实际上它所花的时间更少，因为这样你就不需要频繁复习之前所学。我在好几个场合后才艰难的领悟到这个道理。</strong></p><h3 id="3、使用正确的思维方式练习"><a href="#3、使用正确的思维方式练习" class="headerlink" title="3、使用正确的思维方式练习"></a>3、使用正确的思维方式练习</h3><p><strong>很多人认为敲代码是烦人的重复性工作，所以他们通常会跳过这个步骤试着寻找捷径。如果你试图为JavaScript练习寻找捷径，你将会为此花费更多的时间。</strong></p><p><strong>但是我们如何才能使得敲代码更加的有趣，使得我们愿意去敲代码呢？</strong></p><p><em>试着改变为下面的思维模式：</em></p><blockquote><p> 如果你刚学了一个JavaScript概念，然而你被告知不能使用它，对此你感觉如何？个人来说我会感到有点恼火，特别是为了弄懂它我花费了宝贵的时间。这就像是一个小孩得到了一个新的玩具，但却被限制不能玩它。</p></blockquote><blockquote><p>当你学习JavaScript的新知识，试着将这个知识点视作一个新玩具，例如新车、一双新鞋、或任何你觉得值得有趣的东西。然后，不要把敲代码当成工作，将敲代码视作你正在玩游戏。你正在使用刚学的技能做一些很酷的事情。给自己惊喜，把成果展示给你的朋友。</p></blockquote><blockquote><p>   带着游戏的思维模式你将学得更快，将记忆的更牢，同时你将体会到更多乐趣。</p></blockquote><h3 id="4、使用Facebook技巧为编程腾时间"><a href="#4、使用Facebook技巧为编程腾时间" class="headerlink" title="4、使用Facebook技巧为编程腾时间"></a>4、使用Facebook技巧为编程腾时间</h3><blockquote><p>人们遇到的一个普遍问题是，他们通常找不到时间去敲代码。通常，这些人会花好几个小时浏览例如Facebook、YouTube、Wikipedia或者Reddit这样的网站。无论你是否符合上述描述，我们都能从中学到一些东西。</p></blockquote><blockquote><p> 我当然有时间只浏览Facebook一会儿，但通常我会在上面待好几个小时浏览往返。这是如何发生的？我认为原因在于，刚开始我并没打算花在这上面花费那么多时间。开始行动是做一件事情最困难的部分，所以将目标设定的足够小能够帮助我们进入状态。如果有人问我是不是打算花几个小时浏览Facebook，我会回答不，因为我没有时间。然而，对于仅仅尝试一下我是能够接受的，这也是我能够沉浸其中的方法。</p></blockquote><blockquote><p>  <strong>好消息是，你能够对敲代码运用同样的心理技巧。</strong></p><p>   <strong>不要计划花几个小时敲代码，因为你会发现自己没有时间。</strong></p><p>   <strong>相反的，告诉自己只敲三分钟代码。这样你就不需要为寻找敲代码的时间烦心。</strong></p></blockquote><h3 id="5、思考的更慢你将学得更快"><a href="#5、思考的更慢你将学得更快" class="headerlink" title="5、思考的更慢你将学得更快"></a>5、思考的更慢你将学得更快</h3><blockquote><p>这一条听起来违反直觉，所以下面我将用一个故事来解释。</p></blockquote><blockquote><p>我的一个朋友又一次对JavaScript的一个特性感到困惑。我让他将他知道的解释给我听，然后告诉我哪儿让他困惑。当它向我解释代码，我发现他在跳步。</p></blockquote><blockquote><p>“等会儿！”我说道。“慢慢来，然后将这些一步步解释给我听。”</p></blockquote><blockquote><p>我的朋友直接将整个代码的功能总结给我听。</p></blockquote><blockquote><p>我再次让他暂停。“你还是在跳步。再解释一次，这次我需要你一步步将每一行代码发生了什么解释给我听。”</p></blockquote><blockquote><p>这一次，我的朋友能够更好的解释代码是如何运行的。关键在于他花时间去理解每一行代码而不是试图一下理解所有。</p></blockquote><blockquote><p>在上述这种案例中，<strong>思考的更慢实际上让你学得更快。</strong></p></blockquote><h3 id="6、在写复杂代码前先用简单语言写下"><a href="#6、在写复杂代码前先用简单语言写下" class="headerlink" title="6、在写复杂代码前先用简单语言写下"></a>6、在写复杂代码前先用简单语言写下</h3><blockquote><p>如果你要写的代码是复杂并且不常见的，先用简单语言将代码写下。这样，你能够你能够在真正写之前知道自己要做什么。下面是使用这个方法的两个好处：</p></blockquote><ul><li><p>你将更容易更快速的写代码，因为你不需要时刻停下来思考自己将要怎么做。</p></li><li><p>由于你知道代码要干什么，能够更好的排除错误。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>我们已经讲了好几个更快速学习JavaScript的方法，但是你也能将上述方法运用于学习其他东西。下面是上述方法的概括：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">（1）、不要再想将要学什么，沉浸于现在；</span><br><span class="line"></span><br><span class="line">（2）、通过把新技能当做玩具使得练习更有趣；</span><br><span class="line"></span><br><span class="line">（3）、就像浏览Facebook、YouTube之类的网站一样，在敲代码前告诉自己只敲几分钟，这样你就拥有了敲代码的时间；</span><br><span class="line"></span><br><span class="line">（4）、慢下来，小步向前，你将学得更快。</span><br></pre></td></tr></table></figure><blockquote><p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="noopener">众成翻译</a></p><p>译者：<a href="http://www.zcfy.cc/@Ryan" target="_blank" rel="noopener">Ryan</a></p><p>链接：<a href="http://www.zcfy.cc/article/436" target="_blank" rel="noopener">http://www.zcfy.cc/article/436</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初始整理于慕课网手记&lt;a href=&quot;http://www.imooc.com/article/12113&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;高效学习JavaScript的六个思维技巧&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://tangyanqiong.com/categories/Web/"/>
    
      <category term="JS" scheme="https://tangyanqiong.com/categories/Web/JS/"/>
    
    
      <category term="JavaScript" scheme="https://tangyanqiong.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式学习之单例模式</title>
    <link href="https://tangyanqiong.com/post/23158cb2.html"/>
    <id>https://tangyanqiong.com/post/23158cb2.html</id>
    <published>2018-10-03T13:24:26.000Z</published>
    <updated>2019-07-26T09:44:33.675Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h4><blockquote><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点</p></blockquote><p>用一个变量标志当前是否已经为某个类型创建过对象，如果是，则下次直接返回之前创建的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton.getInstance = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.instance) &#123;</span><br><span class="line">    <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = Singleton.getInstance(<span class="string">'Tony1'</span>);</span><br><span class="line"><span class="keyword">var</span> b = Singleton.getInstance(<span class="string">'Tony2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>通过 <code>Singleton.getInstance</code>来获取 Singleton 类的唯一对象，里边使用了 new 来获取，导致了这个类的“不透明性”。</p><a id="more"></a><h4 id="透明的单例模式"><a href="#透明的单例模式" class="headerlink" title="透明的单例模式"></a>透明的单例模式</h4><p>创建一个“透明”的单例类，就是让我们从这个类中创建对象的时候可以和使用其他普通类一样：<code>var aa = new CreateDiv(&#39;Sisi1&#39;);</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.html = html;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">    <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> CreateDiv;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = <span class="keyword">new</span> CreateDiv(<span class="string">'Sisi1'</span>);</span><br><span class="line"><span class="keyword">var</span> bb = <span class="keyword">new</span> CreateDiv(<span class="string">'Sisi2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa === bb);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>下面这段代码中，CreateDiv 的构造函数负责了两件事：创建对象和执行初始化 init 方法，及保证只有一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.html = html;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">  <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是，如果我们要创建很多的div，这里的 <code>return instance = this;</code> 就需要删掉。</p><h4 id="用代理实现单例模式"><a href="#用代理实现单例模式" class="headerlink" title="用代理实现单例模式"></a>用代理实现单例模式</h4><p>这时候，为了避免上面不能复用的尴尬，通过引入代理类的方式，把负责管理单例的逻辑移交至代理类<code>ProxySingletonCreateDiv</code>，这样<code>CreateDiv</code>只是一个普通的类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.html = html;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ProxySingletonCreateDiv = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> CreateDiv(html);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = <span class="keyword">new</span> ProxySingletonCreateDiv(<span class="string">'Tony1'</span>);</span><br><span class="line"><span class="keyword">var</span> bb = <span class="keyword">new</span> ProxySingletonCreateDiv(<span class="string">'Tony2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa === bb); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript-中的单例模式"><a href="#JavaScript-中的单例模式" class="headerlink" title="JavaScript 中的单例模式"></a>JavaScript 中的单例模式</h4><p>单例模式的核心是：确保只有一个实例，并提供全局访问。</p><ol><li>使用命名空间</li></ol><p>对象字面量的方式: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> namespace1 = &#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace1.a(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>把a和b都定义为 namespace1 的属性，减少了变量和全局作用域打交道的机会，还可以动态地创建命名空间：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyApp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">MyApp.namespace = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parts = name.split(<span class="string">'.'</span>);</span><br><span class="line">  <span class="keyword">var</span> current = MyApp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> parts) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!current[parts[i]]) &#123;</span><br><span class="line">      current[parts[i]] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    current = current[parts[i]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyApp.namespace(<span class="string">'event'</span>);</span><br><span class="line">MyApp.namespace(<span class="string">'dom.style'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(MyApp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于：</span></span><br><span class="line"><span class="keyword">var</span> MyApp = &#123;</span><br><span class="line">  event: &#123;&#125;,</span><br><span class="line">  dom: &#123;</span><br><span class="line">    style: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 使用闭包封装私有变量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用下划线约定私有变量 _name 和 _age。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">var</span> user = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _name = <span class="string">'Seven'</span>;</span><br><span class="line">  <span class="keyword">var</span> _age = <span class="number">27</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getUserInfo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _name + <span class="string">'-'</span> + _age;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.getUserInfo()) <span class="comment">// Seven-27</span></span><br></pre></td></tr></table></figure><h4 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h4><p>宗旨：在需要的时候才创建对象！！！</p><p>栗子：QQ的登录浮窗</p><p>第一种方案：页面加载完成的时候便创建好浮窗。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loginLayer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">  div.style.display = <span class="string">'none'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  <span class="keyword">return</span> div;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是，不管我们登录与否，都会创建悬浮窗，所以我们可以修改为：在点击登录的时候再创建悬浮窗。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">  div.style.display = <span class="string">'none'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  <span class="keyword">return</span> div;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginLayer = createLoginLayer();</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时候，虽然达到了惰性的目的，却失去了单例的效果，每次点击登录，都会创建一个新的悬浮窗。</p><p>所以我们需要一个变量来判断是否已经创建过悬浮窗：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!div) &#123; <span class="comment">// 判断是否已创建</span></span><br><span class="line">      div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">      div.style.display = <span class="string">'none'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginLayer = createLoginLayer();</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="通用的惰性单例"><a href="#通用的惰性单例" class="headerlink" title="通用的惰性单例"></a>通用的惰性单例</h4><p>虽然上面的悬浮框是一个可用的惰性单例，但是仍然违反了单一职责原则，如果我们要创建其他的标签，就需要把创建悬浮窗的函数复制一份，再修修改改，无法做到复用。</p><p>所以，我们需要把不变的部分隔离出来，进行抽象，无论创建什么标签，都是一样的逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj;</span><br><span class="line"><span class="keyword">if</span>(!obj) &#123;</span><br><span class="line">  obj = xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，继续：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> result || (result = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">  div.style.display = <span class="string">'none'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  <span class="keyword">return</span> div;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleLoginLayer = getSingle(createLoginLayer);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginLayer = createSingleLoginLayer();</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时，我们创建其他标签就只需要关系如何创建该标签就可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createIframe = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">  iframe.src = <span class="string">'https://baidu.com'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">  <span class="keyword">return</span> iframe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleIframe = getSingle(createIframe);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn2'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  createSingleIframe();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>单例模式是一种简单却非常常用的模式，特别是惰性单例技术，在合适的时候才创建对象，并且只创建唯一的一个。</p><p><strong>创建对象</strong>和<strong>管理单例</strong>的职责被分布在两个不同的方法中，两个方法组合起来才具有单例模式的威力。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;什么是单例模式？&quot;&gt;&lt;a href=&quot;#什么是单例模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是单例模式？&quot;&gt;&lt;/a&gt;什么是单例模式？&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;保证一个类仅有一个实例，并提供一个访问它的全局访问点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用一个变量标志当前是否已经为某个类型创建过对象，如果是，则下次直接返回之前创建的对象。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Singleton = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.instance = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Singleton.prototype.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Singleton.getInstance = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.instance) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = Singleton.getInstance(&lt;span class=&quot;string&quot;&gt;&#39;Tony1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = Singleton.getInstance(&lt;span class=&quot;string&quot;&gt;&#39;Tony2&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a === b); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过 &lt;code&gt;Singleton.getInstance&lt;/code&gt;来获取 Singleton 类的唯一对象，里边使用了 new 来获取，导致了这个类的“不透明性”。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://tangyanqiong.com/categories/Web/"/>
    
      <category term="JS" scheme="https://tangyanqiong.com/categories/Web/JS/"/>
    
    
      <category term="JavaScript" scheme="https://tangyanqiong.com/tags/JavaScript/"/>
    
      <category term="单例模式" scheme="https://tangyanqiong.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
